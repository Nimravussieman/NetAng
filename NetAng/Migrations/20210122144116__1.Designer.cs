// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetAng.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetAng.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20210122144116__1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CompanyContact", b =>
                {
                    b.Property<int>("ContactsId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedCompaniesId")
                        .HasColumnType("integer");

                    b.HasKey("ContactsId", "RelatedCompaniesId");

                    b.HasIndex("RelatedCompaniesId");

                    b.ToTable("CompanyContact");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NetAng.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("FieldOfActivities")
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageLogoId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ImageLogoId");

                    b.HasIndex("SiteId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("NetAng.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("DetailsId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DetailsId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("NetAng.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("NetAng.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DataEventRecordsRole")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecuredFilesRole")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NetAng.Models.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentAccount")
                        .HasColumnType("integer");

                    b.Property<int?>("DetailsId")
                        .HasColumnType("integer");

                    b.Property<string>("IBAN")
                        .HasColumnType("text");

                    b.Property<int>("MFO")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameOfTheBank")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DetailsId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("NetAng.Models.BooleanField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BooleanFields");
                });

            modelBuilder.Entity("NetAng.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NetAng.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("FieldOfActivities")
                        .HasColumnType("text[]");

                    b.Property<int?>("ImageLogoId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OperationId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ImageLogoId");

                    b.HasIndex("OperationId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NetAng.Models.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("NetAng.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("FieldOfActivities")
                        .HasColumnType("text[]");

                    b.Property<int?>("OperationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("NetAng.Models.ContactSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactSources");
                });

            modelBuilder.Entity("NetAng.Models.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("NetAng.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("NetAng.Models.DateTimeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Value")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("DateTimeFields");
                });

            modelBuilder.Entity("NetAng.Models.Details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AbbreviatedNameOfTheOrganization")
                        .HasColumnType("text");

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("CertificateNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ChiefAccountant")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("GeneralDirector")
                        .HasColumnType("text");

                    b.Property<int>("IPN")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RNTRC")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("USREOU")
                        .HasColumnType("integer");

                    b.Property<bool>("VATPayer")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("NetAng.Models.DetailsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DetailsTypes");
                });

            modelBuilder.Entity("NetAng.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("NetAng.Models.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmailTypes");
                });

            modelBuilder.Entity("NetAng.Models.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("NetAng.Models.FieldOfActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldOfActivities");
                });

            modelBuilder.Entity("NetAng.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FileData")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("NetAng.Models.FileField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileId");

                    b.HasIndex("ProductId");

                    b.ToTable("FileFields");
                });

            modelBuilder.Entity("NetAng.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ImageData")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("NetAng.Models.ImageField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FileId");

                    b.ToTable("ImageFields");
                });

            modelBuilder.Entity("NetAng.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Goals")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuccessfully")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StopActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("NetAng.Models.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("NetAng.Models.MessangerUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("ValueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ValueId");

                    b.ToTable("MessangerUrls");
                });

            modelBuilder.Entity("NetAng.Models.MessangerUrlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessangerUrlTypes");
                });

            modelBuilder.Entity("NetAng.Models.Money", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Money");
                });

            modelBuilder.Entity("NetAng.Models.MoneyField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ValueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValueId");

                    b.ToTable("MoneyFields");
                });

            modelBuilder.Entity("NetAng.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NetAng.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("NetAng.Models.NumericField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("NumericField");
                });

            modelBuilder.Entity("NetAng.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("AmountId")
                        .HasColumnType("integer");

                    b.Property<bool>("AvailableToEveryone")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OperationSource")
                        .HasColumnType("text");

                    b.Property<string>("Phase")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfOperation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AmountId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("NetAng.Models.OperationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationSources");
                });

            modelBuilder.Entity("NetAng.Models.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("NetAng.Models.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("NetAng.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("NetAng.Models.PhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("NetAng.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("MeasurementUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PriceId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("StartActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StopActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("PriceId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NetAng.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Goals")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuccessfully")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StopActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NetAng.Models.StringField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("StringFields");
                });

            modelBuilder.Entity("NetAng.Models.Url", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("NetAng.Models.UrlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UrlTypes");
                });

            modelBuilder.Entity("CompanyContact", b =>
                {
                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("RelatedCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetAng.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetAng.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetAng.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetAng.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetAng.Models.Account", b =>
                {
                    b.HasOne("NetAng.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Account")
                        .HasForeignKey("NetAng.Models.Account", "ApplicationUserId");

                    b.HasOne("NetAng.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("NetAng.Models.Image", "ImageLogo")
                        .WithMany()
                        .HasForeignKey("ImageLogoId");

                    b.HasOne("NetAng.Models.Url", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.OwnsOne("NetAng.Models.AccountCompanyFieldsPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("Addresses_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Addresses_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BankDetails_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BankDetails_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BooleanFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BooleanFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Companies_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Companies_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Contacts_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Contacts_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Currency_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Currency_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateTimeFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateTimeFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Description_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Descriptions_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Details_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Details_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Emails_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Emails_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Employees_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Employees_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FieldOfActivities_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FieldOfActivities_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FileFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FileFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ImageFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ImageFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ImageLogo_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ImageLogo_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Jobs_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Jobs_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MessangerUrls_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MessangerUrls_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("NumericFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("NumericFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Operations_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Operations_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Permissions_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Permissions_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Phones_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Phones_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Products_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Products_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Projects_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Projects_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Sites_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Sites_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StringFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StringFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.Property<bool>("UrlsFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("UrlsFields_IsVisible")
                                .HasColumnType("boolean");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("Currency");

                    b.Navigation("ImageLogo");

                    b.Navigation("Permissions");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("NetAng.Models.Address", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId");

                    b.HasOne("NetAng.Models.Details", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DetailsId");
                });

            modelBuilder.Entity("NetAng.Models.BankDetails", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("BankDetails")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("BankDetails")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Details", null)
                        .WithMany("BankDetails")
                        .HasForeignKey("DetailsId");
                });

            modelBuilder.Entity("NetAng.Models.BooleanField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("BooleanFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("BooleanFields")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("NetAng.Models.Company", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Companies")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Image", "ImageLogo")
                        .WithMany()
                        .HasForeignKey("ImageLogoId");

                    b.HasOne("NetAng.Models.Operation", null)
                        .WithMany("Contractors")
                        .HasForeignKey("OperationId");

                    b.OwnsOne("NetAng.Models.CompanyFieldsPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("Addresses_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BankDetails_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("BooleanFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Contacts_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateTimeFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Description_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Details_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Emails_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Employees_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FileFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MessangerUrls_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("NumericFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Permissions_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Phones_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Sites_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StringFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("UrlsFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("ImageLogo");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("NetAng.Models.Contact", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Operation", null)
                        .WithMany("Contacts")
                        .HasForeignKey("OperationId");

                    b.HasOne("NetAng.Models.Image", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.OwnsOne("NetAng.Models.ContactFieldsPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("Addresses_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Companies_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ContactSource_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ContactType_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateOfBirth_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Description_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Details_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Emails_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MessangerUrls_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Phones_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Photo_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Position_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Sites_IsPublic")
                                .HasColumnType("boolean");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.OwnsOne("NetAng.Models.UserName", "Name", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.Property<string>("SurName")
                                .HasColumnType("text");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("Name");

                    b.Navigation("Permissions");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("NetAng.Models.DateTimeField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("DateTimeFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("DateTimeFields")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Product", null)
                        .WithMany("DateTimeFields")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("NetAng.Models.Details", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Details")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Details")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("Details")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("NetAng.Models.Email", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Emails")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Emails")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("Emails")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("NetAng.Models.Employe", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Employees")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NetAng.Models.FileField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("FileFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("FileFields")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.HasOne("NetAng.Models.Product", null)
                        .WithMany("FileFields")
                        .HasForeignKey("ProductId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("NetAng.Models.Image", b =>
                {
                    b.HasOne("NetAng.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("NetAng.Models.ImageField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("ImageFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("ImageFields")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Image", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("NetAng.Models.Job", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Jobs")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Project", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("NetAng.Models.MessangerUrl", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("MessangerUrls")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("MessangerUrls")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("MessangerUrls")
                        .HasForeignKey("ContactId");

                    b.HasOne("NetAng.Models.Url", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("NetAng.Models.Money", b =>
                {
                    b.HasOne("NetAng.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("NetAng.Models.MoneyField", b =>
                {
                    b.HasOne("NetAng.Models.Money", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("NetAng.Models.NumericField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("NumericFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("NumericFields")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Product", null)
                        .WithMany("NumericFields")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("NetAng.Models.Operation", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Operations")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Money", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.OwnsOne("NetAng.Models.OperationFieldsPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("OperationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("Amount_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AvailableToEveryone_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Contacts_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Contractors_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CreateDate_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateOfChange_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Description_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EndDate_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Permissions_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Phase_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("TypeOfOperation_IsPublic")
                                .HasColumnType("boolean");

                            b1.HasKey("OperationId");

                            b1.ToTable("Operations");

                            b1.WithOwner()
                                .HasForeignKey("OperationId");
                        });

                    b.Navigation("Amount");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("NetAng.Models.Phone", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Phones")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Phones")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("Phones")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("NetAng.Models.Product", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Products")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("NetAng.Models.Money", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.OwnsOne("NetAng.Models.ProductFieldsPermissions", "Permissions", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<bool>("CreateDate_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateOfChange_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DateTimeFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Description_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("FileFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Images_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MeasurementUnit_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Name_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("NumericFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Permissions_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Price_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("Quantity_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("SortIndex_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StartActivityDate_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StopActivityDate_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("StringFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.Property<bool>("UrlsFields_IsPublic")
                                .HasColumnType("boolean");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Permissions");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("NetAng.Models.Project", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("Projects")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("NetAng.Models.StringField", b =>
                {
                    b.HasOne("NetAng.Models.Account", null)
                        .WithMany("StringFields")
                        .HasForeignKey("AccountId");

                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("StringFields")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Product", null)
                        .WithMany("StringFields")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("NetAng.Models.Url", b =>
                {
                    b.HasOne("NetAng.Models.Company", null)
                        .WithMany("Sites")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NetAng.Models.Contact", null)
                        .WithMany("Sites")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("NetAng.Models.Account", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankDetails");

                    b.Navigation("BooleanFields");

                    b.Navigation("Companies");

                    b.Navigation("Contacts");

                    b.Navigation("DateTimeFields");

                    b.Navigation("Details");

                    b.Navigation("Emails");

                    b.Navigation("Employees");

                    b.Navigation("FileFields");

                    b.Navigation("ImageFields");

                    b.Navigation("Jobs");

                    b.Navigation("MessangerUrls");

                    b.Navigation("NumericFields");

                    b.Navigation("Operations");

                    b.Navigation("Phones");

                    b.Navigation("Products");

                    b.Navigation("Projects");

                    b.Navigation("StringFields");
                });

            modelBuilder.Entity("NetAng.Models.ApplicationUser", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("NetAng.Models.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankDetails");

                    b.Navigation("BooleanFields");

                    b.Navigation("DateTimeFields");

                    b.Navigation("Details");

                    b.Navigation("Emails");

                    b.Navigation("Employees");

                    b.Navigation("FileFields");

                    b.Navigation("ImageFields");

                    b.Navigation("MessangerUrls");

                    b.Navigation("NumericFields");

                    b.Navigation("Phones");

                    b.Navigation("Sites");

                    b.Navigation("StringFields");
                });

            modelBuilder.Entity("NetAng.Models.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Details");

                    b.Navigation("Emails");

                    b.Navigation("MessangerUrls");

                    b.Navigation("Phones");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("NetAng.Models.Details", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankDetails");
                });

            modelBuilder.Entity("NetAng.Models.Operation", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Contractors");
                });

            modelBuilder.Entity("NetAng.Models.Product", b =>
                {
                    b.Navigation("DateTimeFields");

                    b.Navigation("FileFields");

                    b.Navigation("Images");

                    b.Navigation("NumericFields");

                    b.Navigation("StringFields");
                });

            modelBuilder.Entity("NetAng.Models.Project", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
